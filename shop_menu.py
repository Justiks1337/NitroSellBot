import disnake
from shop_category_1 import CategoryView
from DataBaseAssistant import unfull_select, full_select


class ShopSelectMenu(disnake.ui.Select):
    def __init__(self):
        options = [
                disnake.SelectOption(label="Discord", emoji="‚ú®", description="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
                disnake.SelectOption(label="Telegram", emoji="‚ú®", description="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
                disnake.SelectOption(label="Minecraft", emoji="‚ú®", description="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
                disnake.SelectOption(label="–ü—Ä–æ—á–µ–µ", emoji="‚ú®", description="–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"),
            ]
        super().__init__(placeholder="Select an option", max_values=1, min_values=1, options=options)

    async def callback(self, inter):
        try:
            if self.values[0] == "Discord":
                my_select = await unfull_select("SELECT * FROM products WHERE category = ?", (1,))
                await inter.response.edit_message(embed=disnake.Embed(description=await give_message(my_select)), view=CategoryView(my_select))
            elif self.values[0] == "Telegram":
                my_select = await unfull_select("SELECT * FROM products WHERE category = ?", (2,))
                await inter.response.edit_message(embed=disnake.Embed(description=await give_message(my_select)), view=CategoryView(my_select))
            elif self.values[0] == "Minecraft":
                my_select = await unfull_select("SELECT * FROM products WHERE category = ?", (3,))
                await inter.response.edit_message(embed=disnake.Embed(description=await give_message(my_select)), view=CategoryView(my_select))
            elif self.values[0] == "–ü—Ä–æ—á–µ–µ":
                my_select = await unfull_select("SELECT * FROM products WHERE category = ?", (4,))
                await inter.response.edit_message(embed=disnake.Embed(description=await give_message(my_select)), view=CategoryView(my_select))
        except:
            await inter.response.edit_message(embed=disnake.Embed(description="–¢–æ–≤–∞—Ä soon..."), components=[disnake.ui.Button(emoji="üëà", label="–í–µ—Ä–Ω—É—Ç—å—Å—è", style=disnake.ButtonStyle.gray, custom_id="Back")])


class ShopView(disnake.ui.View):
    def __init__(self):
        super().__init__()
        self.add_item(ShopSelectMenu())

    @disnake.ui.button(emoji="üëà", label="–í–µ—Ä–Ω—É—Ç—å—Å—è", style=disnake.ButtonStyle.gray, custom_id="Back", row=2)
    async def back_button_callback(self, button, inter):
        """
        –ù–∞ –∑–∞–º–µ—Ç–∫—É
        –ê–≤—Ç–æ—Ä –∑–Ω–∞–µ—Ç —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –ø—É—Å—Ç–æ–π, –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω —á—Ç–æ –±—ã –Ω–µ –æ—Ç—Ö–æ–¥–∏—Ç—å –æ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã
        –ê–≤—Ç–æ—Ä –∑–Ω–∞–µ—Ç —á—Ç–æ –∫–Ω–æ–ø–∫—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ View.add_item
        –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä—É –º–µ—Ç–æ–¥–∞ –∑–∞—Ö–æ—á–µ—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏–∑ –∫–æ–¥–∞ - –æ–Ω —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç
        """
        pass


async def give_message(my_select):
    message = ""
    for i in my_select:
        products = await unfull_select("SELECT token FROM tokens WHERE id = ?", (i[0], ))
        message = message + f"**{i[1]}** \n –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {i[2]} \n –°–µ–π—á–∞—Å –Ω–∞ —Å–∫–ª–∞–¥–µ: {len(products)} \n"
    return message
