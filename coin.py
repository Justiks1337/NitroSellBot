import disnake
from random import getrandbits
from changing_balance import replenishment_of_funds, withdrawal_of_funds

multiplier = 1.2  # –ú–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —É–º–Ω–æ–∂–µ–Ω–∏–µ –±–∞–ª–∏–∫–∞ –º–µ–Ω—å—à–µ/–±–æ–ª—å—à–µ (–Ω–µ —Å–æ–≤–µ—Ç—É—é, –ø–æ–¥–æ–±—Ä–∞–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
CoinFrame = disnake.Embed(title="–ú–æ–Ω–µ—Ç–∫–∞", description=f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å {multiplier} \n –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Å—Ç–æ—Ä–æ–Ω –º–æ–Ω–µ—Ç–∫–∏, –µ—Å–ª–∏ —É–≥–∞–¥—ã–≤–∞–µ—à—å - —É–º–Ω–æ–∂–∞–µ—à—å —Å–≤–æ—é —Å—Ç–∞–≤–∫—É –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—å").add_field(value=str(3), name="–°—Ç–∞–≤–∫–∞")


class CoinButtons(disnake.ui.View):
    @disnake.ui.button(label="–û—Ä—ë–ª", emoji="ü™ô", style=disnake.ButtonStyle.primary)
    async def orel_button_callback(self, button, inter):
        await withdrawal_of_funds(inter, int(inter.message.embeds[0].fields[0].value))
        if bool(getrandbits(1)):
            await replenishment_of_funds(inter, round(int(inter.message.embeds[0].fields[0].value) * multiplier, 1))
            await inter.send(embed=disnake.Embed(description=f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∏–≥—Ä–∞–ª {str(round(int(inter.message.embeds[0].fields[0].value) * multiplier, 1))} –º–æ–Ω–µ—Ç!"), ephemeral=True)
            return
        await inter.send(embed=disnake.Embed(description=f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {inter.message.embeds[0].fields[0].value} –º–æ–Ω–µ—Ç!"), ephemeral=True)

    @disnake.ui.button(label="–†–µ—à–∫–∞", emoji="ü™ô", style=disnake.ButtonStyle.primary)
    async def reshka_button_callback(self, button, inter):
        await withdrawal_of_funds(inter, int(inter.message.embeds[0].fields[0].value))
        if not bool(getrandbits(1)):
            await replenishment_of_funds(inter, round(int(inter.message.embeds[0].fields[0].value) * multiplier, 1))
            await inter.send(embed=disnake.Embed(description=f"–¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∏–≥—Ä–∞–ª {str(round(int(inter.message.embeds[0].fields[0].value) * multiplier, 1))} –º–æ–Ω–µ—Ç!"), ephemeral=True)
            return
        await inter.send(embed=disnake.Embed(description=f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª {inter.message.embeds[0].fields[0].value} –º–æ–Ω–µ—Ç!"), ephemeral=True)

    @disnake.ui.button(label="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞–≤–∫—É", emoji="üí†", style=disnake.ButtonStyle.success, row=2)
    async def change_bit_button_callback(self, button, inter):
        await inter.response.send_modal(modal=InputBit())

    @disnake.ui.button(label="–í–µ—Ä–Ω—É—Ç—å—Å—è", emoji="üëà", custom_id="Back", style=disnake.ButtonStyle.gray)
    async def back_button_callback(self, button, inter):
        pass

    async def on_error(self, error, item, inter):
        pass


class InputBit(disnake.ui.Modal):
    """
    –ö–ª–∞—Å—Å  InputBit –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –≤ –Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ coin.py

    –ù–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç disnake.ui.Modal
    """
    def __init__(self):
        components = [disnake.ui.TextInput(label="–°—Ç–∞–≤–∫–∞", placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç–∞–≤–∫—É", custom_id="bit", style=disnake.TextInputStyle.short, max_length=50,)]
        super().__init__(title="Create Tag", components=components, custom_id="money_amount")

    async def callback(self, inter: disnake.ModalInteraction):
        try:
            check = int(inter.text_values["bit"])
            if check > 3:
                await inter.response.edit_message(embed=CoinFrame.set_field_at(index=0, value=str(check), name="–°—Ç–∞–≤–∫–∞"))
                return
            await inter.send(embed=disnake.Embed(description="**–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.**"), ephemeral=True)
        except ValueError:
            await inter.send(embed=disnake.Embed(description="**–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.**"), ephemeral=True)


async def show_coin(inter):
    await inter.response.edit_message(embed=CoinFrame, view=CoinButtons(timeout=None))
